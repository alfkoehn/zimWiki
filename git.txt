Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-23T12:23:25+02:00

====== git ======
Created Sonntag 23 Juni 2019

===== Overview =====
{{./diagram.png?type=diagram}}
Note that the //index// is also referred to as //staging area//.

Current commit (most recent) is called //HEAD//.

===== Basic commands =====
	''$ git init''				create new repo in current directory
	''$ git clone /repo_path	''		create working copy of local repo
	''$ git close <user>@host:/repo_path''	create working copy of remote repo
	
	''$ git add <file>''			add/update file (or path) to index
	''$ git commit -m "fix bug#42"	''	commit changes to HEAD (including log message)
	''$ git rm <file>''				remove file (or path) from being tracked by git (don't forget to ''commit'' afterwards)
	''$ git diff''				show changes not yet added to index
	''$ git diff --cached''			show what will be committed (i.e. differences between index & HEAD)
	
	''$ git remote add origin <server>''	connect local repo to remote repo
										   (link server to alias origin; run if no clone before)
	''$ git push origin master	''	push changes (from HEAD) to remote repo (change master if desired)
	''$ git pull <remote>''			pull (fetch & merge) changes from remote repo
	''$ git remote -v''				show URL that git has stored for the alias origin
	
	''$ git status''				show a brief status message


===== Setting up a new repo on github and on your PC =====
1. Create project with <project-name> at github.com
2. Initialize folder on your PC as a git repo
	$ ''git init''
3. Configure git on your PC
	''$ git config --global user.name "Name2AppearInCommits"''
	''$ git config --global user.email "myGitHub@email.address"''
	''$ git config --global core.editor "vim"''
	**note**: if used w/o ''--global'' (or ''--local''), settings are only for specific project
4. Bring new/modified file to git's attention (add to //staging area//)
	''$ git add <some-file>''
5. commit changes to local repo (from //staging area// to //repo//)
	''$ git commit -m 'interesting change message and log'''
	* not using ''-m 'commit message''' will open an editor
	* common agreement is to have 1st line of 72 characters, then empty line, then longer message (if desired)
6. Connect local repo to repo at GitHub
	''$ git remote add origin https://github.com/<username>/<project-name>.git''
	to check, type: ''git remote -v''
7. push local repo to GitHub
	''$ git push''
	more detailed might be better: ''git push -u origin master''


===== Getting a remote repo (you are owner of that repo) =====
1. Initially clone remote repo to local place (get full copy of repo)
	''$ git clone <remote_location> <clone_name>''
	* ''<remote_locate>'' can be web-address or git-repo-folder
	* ''<clone_name>'' folder into which git will clone the repo
	* if not set, folder with ''<project-name>'' is created
	* e.g.:	''git clone git://github.com/aalemann/dotfiles.git''
			''git clone https://github.com/aalemann/dotfiles.git''
			''git clone <user>@<server>:<path-to-project>.git''
2. Get latest version from GitHub
	''$ git pull''
3. Push changes you made from local repo to remote repo
	''$ git push origin master''


===== Work with branches =====
	''$ git branch''					show which branch you are on and lists all projects branches
	''$ git branch <branch>	''			create new branch <branch-name> (copy of master)
	''$ git checkout <branch>	''			switch to branch <branch-name>
	''$ git checkout -b <branch>	''		create new branch <branch-name> and switch to it
	''$ git branch -d <branch>''			delete <branch-name> (must be fully merged)
												  (after is has successfully merged with master, it is no longer needed and can be deleted as master   
												  contains all file-changes that were in <//branch//>)
	''$ git branch -D <branch>''			delete <branch-name> (ignoring merge status)
	
	''$ git push origin <branch>	''		push <//branch-name//> to remote repo //origin//
	''$ git pull master''				update local repo (fetch & merge remote changes in master branch into current branch)
	''$ git fetch <remote-alias>	''		download new date from remote repo (no merge, has to be done manually)
	
	''$ git merge <branch>	''			merge <branch> into current branch (take all changes from <branch> and add them to current branch)
												  solve conflicts manually by editing corresponding files and ''git add <file>'' after that
	''$ git diff <b1> <b2>''				show differences between branches <//b1//> and <//b2//>
															  usually done before merging them
	
	''$ git remote show <remote-alias>	''	show info about remote repo


===== Typical workflow when collaborating on a remote repo =====
1. Fetch and merge changes from remote
	(check for changes of remote and bring them down to local copy
	(note: changes are not merged into local repo 
		   but put into remote-branch (branch-name: origin/master)
	''$ git fetch''
	''$ git merge origin/master''
2. Create branch to work on new project feature
3. Develop feature on your branch and commit your work
4. Fetch and merge from remote again (in case new commits were made while you were working)
5. Push your branch up to the remote for review
	(remote boss can then review and add to master branch)
	''$ git push origin <your_branch_name>''
 
  (1. and 4. are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command.)

===== Backtrack/rewind changes =====
1. Restore file in working dir to version when last made commit (in case you messed around in the working dir)
	''$ git checkout HEAD <file>''
2. Unstage file from staging area (resets file in staging area to be same as in HEAD commit) 
	''$ git reset HEAD <filename>''
3. Using first 7 characters from commit to reset to this state
	(use git log to display SHAs)
	note: you change history!  
	''$ git reset commit_SHA''


===== Git Configuration =====
	''~/.gitconfig''			contains global git configuration
	''$ git config --list''		show git username and email
	''$ git config --global''		add user name to global git config (appearing in commits)
		''user.name <name>''
	''$ git config --global''		add email address to global git config (appearing in commits)
		''user.email <email>''
	''$ git config --local''		set user name for current repo
		''user.name <name>''
	''$ git config --local''		set email for current repo
		''user.email <email>''


===== Other useful commands =====
	''$ git log''
		show list of commits
	''$ git log --pretty=oneline''
		commit history in oneline
	''$ git diff <file>''
		show difference of file between working dir and staging area
	''$ git diff --cached (oder --staged)''
		show difference between staged area and last commit
	''$ git show HEAD''
		see HEAD commit
	''$ git commit -a''
		takes changed files directly from working dir (no need for git add)
	''$ git rm <file>''
		remove file from versioning-control, is no longer tracked by git
	''$ git status''
		show current status of repo
	''$ git remote -v''
		list remotes
	''$ git help''
		shows most common git commands
	''$ git config --list''
		show settings
	''$ git commit --amend -m "New commit message"''
		change last commit message
	''$ git branch -a''
		list all branches
	''$ git remote update && git status''
		''git remote update'' to bring your remote refs up to date
		''git status'' to check was is different to my local version
		then (''git pull origin master'') to bring local up to data


===== Good git commit messages =====
1. Limit subject to 1 line with roughly 50 chars
2. Imperative mood in subject line (read as //if applied, the commit will <your-commit-subject>//)
3. No period at end of subject line
4. Blank line between subject and body (note: for small/tiny commits, a body might not be needed)
5. Wrap body text at approximately 72 characters (in vim, type '':set textwidth=72'')
6. Use body to explain what and why and not how

