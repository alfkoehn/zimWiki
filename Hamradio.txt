Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-07-30T05:56:34+02:00

====== Hamradio ======
Created Dienstag 30 Juli 2019

===== General tips =====
* QSO on HF
	* find open frequency
	* listen for 1 or 2 minutes to check it's clear
	* say "is this frequency in use?"
	* wait a few seconds, then repeat
	* call "CQ CQ CQ this is <call-sign> calling CQ and standing by"
	* wait a few seconds, then repeat
	* if somebody responds, write down call sign, signal report (if given), name
	* determine signal strength of your partner
	* respond "Hello <call-sign>, you are <signal-report> here is <your-location>, nice to meet you <their-name>, my name is <my-name>"
	* note: spell your name (and call-sign) in standard phonetics
	* "QSL?" sending it back to them
	* call sign + signal report = valid QSO
	* finish QSO by "Thank you <their-name/call-sign>, it was nice to meet you. 73"
	* wait for them to say goodbye
	* say "this is <your-call-sign>, QRZ"
	* when shutting off, "this is <your-call-sign> going QRT"
* some people recommend to do not call CQ on repeater
	* note that people tend to reply "do not use CQ here"
		 --> you made a QSO :)
		 --> tell them you're a beginner, that's always fine


===== MD-380 =====
* Kenwood K1 connector (for mic & headphones)


===== Getting data from NOAA weather satellites =====
NOAA 15, 18, 19 sending in APT-format images to earth at 137 MHz
1. Build a Quadrifilar Helix Antenna
	* (right hand circular polarized tuned to 137 MHz)
	* see http://www.gregorystrike.com/2010/05/16/quadrifilar-helix-antenna-137-mhz/
	   or  http://www.qsl.net/kf4cpj/qha/
	   or in the German Make magazine 4/2014, page 98
2. get a software defines radio (SDR) for USB port 
	* attention: the chip "Realtek RTL2832U" must be used
	   (these devices are usually used as DVB-T TV-Sticks)
3. install the proper software: gqrx and rtl-sdr
	* since ubuntu 14.04 they are in the repos
		''$ sudo apt-get install gqrx-sdr rtl-sdr''
	* or clone latest version: git clone git://git.osmocom.org/rtl-sdr.git)
	* 3a. check if everything is working by running gqrx
		''$ gqrx''
		if it crashes because the stick cannot be used, try 
		$ sudo rmmod dvb_usb_rtl28xxu 
		$ sudo rmmod rtl2832
		$ sudo rmmod rtl2830
		to make this permanent, blacklist them by editing as root following file
		''/etc/modprobe.d/blacklist.conf''
		add following lines:
		''blacklist dvb_usb_rtl28xxu''
		''blacklist rtl2832''
		''blacklist rtl2830''
		config file for gqrx is found at ''~/.config/gqrx/default.conf''
	* 3b. tune to a local radio station and check if you can hear something
		* Receiver Options: Mode --> WFM
		* if quality is very bad, click on Tools-->AFSK1200 Decoder
		  or off/on or check cable connection
4. install a software to track the weather satellites
	''$ sudo apt-get install gpredict''
	a. Edit --> Preferences
		* Number Formats: Show local time instead of UTC
		* Ground Stations: enter you location
		Edit --> Update TLE --> From network
	b. by default, radio amateur satellites are shown
		* click on small down-pointing arrow on top right corner --> configure
		* add NOAA weather satellites: 15, 16, 17, 18, 19
5. install software to translate fax-type data of NOAA satellites to images
	deb-package or 64bit zip at http://www.wxtoimg.com/downloads/
	for 64bit tar-zipped file, install as follows:
	''gunzip < wxtoimg-linux64-2.10.11-1.tar.gz | sudo sh -c "(cd /; tar -xvf -)"''
5a. test if it works
	''$ xwxtoimg''
5b. File --> Update Keplers (need to be done regularly)
5c. File --> Satellite Pass List
	  check for next satellite pass, use the time to start recording with gqrx
6. NOTE: NOAA APT satellites send data at 11025 kHz, USB dongle is at 48000 kHz
		=> can't decode in realtime
		   => use program to resample file (previously recorded with gqrx)
				recommendation: use sox
			   => install from repo (if not already installed)
7. record NOAA satellites with gqrx
	* NOAA 15 - 137.6200MHz
	* NOAA 18 - 137.9125MHZ
	* NOAA 19 - 137.1000 MHZ (note: Meteor M2 also uses this frequency)
	* gqrx settings, Receiver Options:
		* Mode --> Narrow FM
			  Spanner and Screwdriver Icon next to it --> change 'Max Dev' to 'APT 17K' and 'Tau' to 'Off'
		* Filter --> User (45k)
		   use mouse, left click on filter boundary (mouse pointer is an angled arrow then)
		   ctrl-mousewheel also works for fine adjustment
		   DO NOT change this during recording (frequency adjust (Doppler compensation) is OK)
	* gqrx settings, Input controls:
		* tick "DC rem."
		* tick "Hardware AGC"
			  if not, manually adjust LNA Gain (also OK)
	* gqrx settings, Audio:
		* Spanner and Screwdriver Icon (Audio options)
			  specify location where to save the audio file
		* set Gain to some value so it is not too loud 
	* start recording time indicated by "Satellite Pass List" or by gpredict
8. process the file with wxtoimg
8a. after successfull recording, wav file needs to be re-sampled
	''$ sox <input-wave-file> <output-wave-file> rate 11025''
8b. file needs same timestamp for wxtoimg to know correct pass time
	''$ touch <output-wave-file> -r <input-wave-file>''
8c. open ''wxtoimg'' and open the ''<output-wave-file>''


===== Tracking planes with SDR =====
Planes sending unidirectional digital packages at 1090 MHz = ADS-B
1. install some packages
	''$ sudo apt-get install libusb-1.0-0-dev''
	 (also needed: ''cmake, git, build-essential'')
2. install ''gqrx'' from repos
	 test with 
	''$ rtl_test -t''
3. might be necessary to do 3a as in NOAA instructions (blacklist rmmod)
4. install rtl_sdr components (that were not included in gqrx)
	''$ sudo git clone git://git.osmocom.org/rtl-sdr.git''
	now compile the software:
	''$ cd rtl-sdr/''
	''$ sudo mkdir build''
	''$ cd build''
	''$ sudo cmake ../''
	''$ sudo make''
	''$ sudo make install''
	''$ cd ~''
	''$ sudo cp ~/rtl-sdr/rtl-sdr.rules /etc/udev/rules.d/''
	''$ sudo ldconfig''
5. install Dump1090 - ADS-B Software
	''$ sudo git clone git://github.com/antirez/dump1090.git''
	 now compile the software:
	''$ cd dump1090/''
	''$ sudo make''
6. testing ADS-B recording
	''$ ./dump1090 --interactive''
	 or, as an alternative
	''$ ./dump1090 --interactive --net''
	 open in browser: localhost:8080
