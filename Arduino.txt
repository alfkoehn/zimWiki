Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-09-05T19:20:31+02:00

====== Arduino ======
Created Samstag 05 September 2020


===== Installing Arduino IDE and setting it up for ESP8266 =====
1. Download software from https://www.arduino.cc/en/Main/Software
2. Decompress archiv and start installation script
	''$ sudo ./install.sh''
3. It might be necessary to install Java-Runtine
	''$ sudo apt install openjdk-8-jre''
4. Make your user a member of the ''dialout'' group in order to have access to the serial port
	''$ sudo usermod -a -G dialout $USER''
5. Log user out and in again 
6. Register ESP8266 into the Arduino IDE by entering its board URL
	File → Preferences → Settings
	Additional Boards Manager URLs: http://arduino.esp8266.com/stable/package_esp8266com_index.json
7. Install EPS8266 driver for the Arduino IDE
	Tools → Board: [....] → Boards Manager...
	enter ESP8266 into the dialogue and install the corresponding driver (only one should be found)
8. Define the board of the ESP8266
	Tools → Board: [...] 
	choose yours, e.g. NodeMCU 1.0 (ESP-12E Module)
9. You might need additional drivers to recognize the serial port (depends on the USB-UART converter)


===== Program example: blinking LED =====
1. Take care that the ESP8266 is registered at the Arduino IDE (see above)
	in case you need it, the board manager URL can be looked up at https://github.com/esp8266/arduino
2. File → Examples → ESP8266 → Blink
3. Replace in the code ''LED_BUILTIN'' with ''D8'' or whatever pin you want to use
4. Save the code under a new file name
5. Plug the ESP8266 board to your PC
6. Check the com port
	Tools → Port
	If not already set per default increase Upload Speed to 115200 (Tools → Upload Speed)
7. Upload the code to the ESP8266
	<''ctrl> + u''
8. Connect LED with long pin to ''D8'' and short pin to ''GND''
	it should start blinking
	
	

===== Program example: controlling the internal LED via the "Serial Monitor" (i.e. console) =====
1. Use the following code
{{{code: lang="c" linenumbers="True"
char data;
String SerialData="";

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(D0,OUTPUT);     // pin D0 corresponds to the internal LED
}

void loop() {
  // put your main code here, to run repeatedly:

  // read the string from the serial monitor (the console)
  while(Serial.available()) {
    delay(15);
    data=Serial.read();
    SerialData+=data;
  }

  // turn LED on or off (and send message back to console)
  if(SerialData=="on") {
    digitalWrite(D0,LOW);
    Serial.println("LED ON");
  }
  if(SerialData=="off") {
    Serial.println("LED OFF");
    digitalWrite(D0,HIGH);
  }

  SerialData="";
} 
}}}
		
2. Upload the code to the EPS8266
3. Start the Serial Monitor (Tools → Serial Monitor or ''<ctrl> + M'')
4. Set the baud rate to the value set in the code (115200)
5. Set "No line ending"


===== Program example: controlling an LED via WiFi =====
1. Use the following code
{{{code: lang="c" linenumbers="True"
#include <ESP8266WiFi.h>
 
const char* ssid = "WIFI_NAME";
const char* password = "PASSWORD";
 
#define DIODE_PIN D8

WiFiServer server(80);
 
void setup() {
  Serial.begin(115200);
  delay(10);
 
  pinMode(DIODE_PIN, OUTPUT);
  digitalWrite(DIODE_PIN, LOW);
 
  // Connect to WiFi network
  Serial.print("Connecting to ");
  Serial.println(ssid); 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
 
  // Start the server
  server.begin();
  Serial.println("Server started");
 
  // Print the IP address
  Serial.print("Use this URL to connect: ");
  Serial.print("http://");
  Serial.print(WiFi.localIP());
  Serial.println("/");
 
}
 
void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
 
  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(1);
  }
 
  // Read the first line of the request
  String request = client.readStringUntil('\r');
  Serial.println(request);
  client.flush();
 
  // Match the request
  int value = LOW;
  if (request.indexOf("/LED=ON") != -1)  {
    digitalWrite(DIODE_PIN, HIGH);
    value = HIGH;
  }
  if (request.indexOf("/LED=OFF") != -1)  {
    digitalWrite(DIODE_PIN, LOW);
    value = LOW;
  }
  
  // Return the response
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println(""); //  do not forget this one
  client.println("<!DOCTYPE HTML>");
  client.println("<html>");
 
  client.print("Led is now: ");
 
  if(value == HIGH) {
    client.print("On");
  } else {
    client.print("Off");
  }
  client.println("<br><br>");
  client.println("<a href=\"/LED=ON\"\"><button>On </button></a>");
  client.println("<a href=\"/LED=OFF\"\"><button>Off </button></a><br />");  
  client.println("</html>");
 
  delay(1);
  Serial.println("Client disonnected");
  Serial.println("");
 
} 
}}}
	 

2. Connect LED with long pin to ''D8'' and short pin to ''GND''
3. Upload the code to the ESP8266
4. Start the Serial Monitor (Tools → Serial Monitor or ''<ctrl> + M'')
5. Set the baud rate to the value set in the code (115200)
6. Open the corresponding IP address in your browser and 


