Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-09-05T19:20:31+02:00

====== Arduino ======
Created Samstag 05 September 2020


===== ESP8266 & NodeMCU =====
* ESP8266 is a widespread WiFi-modul
* its WiFi capabilities allows to operate EPS8266 (or NodeMCU) as server, access-point, or client
* all modules of the ESP-series can be controlled via a micro controller, an internal firmware interprets AT-commands (similar to old-school modems)
* modules itself can also be programmed, no extra micro controller or arduino-board necessary
	* ESP8266 has 80 MHz (at maximum even 160 MHz), which is faster than most Arduino-boards
	* more memory than Arduino-boards (ESP-12E has 4 MB, ESP-01 has still 512 kB)
	* ESP-12E series modules have lots of I/O-ports, serial ports like SPI, I2C
	* similar ESP8266 modules have all very similar programming standards (mostly, only the number and type of ports (GPIO) varies
	* programming can be done via Arduino IDE, lua-scripts or python
* NodeMCU development board is ESP8266 + USB-port + voltage-stabilizer for power supply
	* coding has been simplified
	* simply connect with USB-cabel to PC and C-code can be directly transferred via Arduino IDE
* WiFi requires high currents, up to 170 mA (too high for battery usage)
	→ ESP chips can be put into sleep mode (DeepSleep-Mode, 0.5 muA)
* typical pin connection of an NodeMCU board (version 2)
	{{~/Desktop/NodeMCU-pinconnection.png}}
	
* using a NodeMCU ports can be accessed either via the name (e.g. D8) or the corresponding pin number (e.g. 15)
* loops which take longer than 20 ms should always have a ''delay'' or ''yield'' in


===== Installing Arduino IDE and setting it up for ESP8266 =====
1. Download software from https://www.arduino.cc/en/Main/Software
2. Decompress archiv and start installation script
	''$ sudo ./install.sh''
3. It might be necessary to install Java-Runtine
	''$ sudo apt install openjdk-8-jre''
4. Make your user a member of the ''dialout'' group in order to have access to the serial port
	''$ sudo usermod -a -G dialout $USER''
5. Log user out and in again 
6. Register ESP8266 into the Arduino IDE by entering its board URL
	File → Preferences → Settings
	Additional Boards Manager URLs: http://arduino.esp8266.com/stable/package_esp8266com_index.json
7. Install EPS8266 driver for the Arduino IDE
	Tools → Board: [....] → Boards Manager...
	enter ESP8266 into the dialogue and install the corresponding driver (only one should be found)
8. Define the board of the ESP8266
	Tools → Board: [...] 
	choose yours, e.g. NodeMCU 1.0 (ESP-12E Module)
9. You might need additional drivers to recognize the serial port (depends on the USB-UART converter)


===== Program example: blinking LED =====
1. Take care that the ESP8266 is registered at the Arduino IDE (see above)
	in case you need it, the board manager URL can be looked up at https://github.com/esp8266/arduino
2. File → Examples → ESP8266 → Blink
3. Replace in the code ''LED_BUILTIN'' with ''D8'' or whatever pin you want to use
4. Save the code under a new file name
5. Plug the ESP8266 board to your PC
6. Check the com port
	Tools → Port
	If not already set per default increase Upload Speed to 115200 (Tools → Upload Speed)
7. Upload the code to the ESP8266
	<''ctrl> + u''
8. Connect LED with long leg (the anote) to ''D8'' and short leg via 220 Ohm to ''GND ''(it should start blinking)
	→ resistor in series to the LED to limit current through LED (in principle NodeMCU limits current (12 mA), too, but value might be too high and will result in shorter lifetime of LED)
		R = (U_in - U_LED) / I
	{{../Arduino__NodeMCU_LED_220Ohm.png}}
	

===== Program example: controlling the internal LED via the "Serial Monitor" (i.e. console) =====
1. Use the following code
{{{code: lang="c" linenumbers="True"
char data;
String SerialData="";

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(D0,OUTPUT);     // pin D0 corresponds to the internal LED
}

void loop() {
  // put your main code here, to run repeatedly:

  // read the string from the serial monitor (the console)
  while(Serial.available()) {
    delay(15);
    data=Serial.read();
    SerialData+=data;
  }

  // turn LED on or off (and send message back to console)
  if(SerialData=="on") {
    digitalWrite(D0,LOW);
    Serial.println("LED ON");
  }
  if(SerialData=="off") {
    Serial.println("LED OFF");
    digitalWrite(D0,HIGH);
  }

  SerialData="";
} 
}}}
		
2. Upload the code to the EPS8266: 	<''ctrl> + u''
3. Start the Serial Monitor (Tools → Serial Monitor or ''<ctrl> + M'')
4. Set the baud rate to the value set in the code (115200)
5. Set "No line ending"


===== Program example: get time from Internet =====
1. Use the following code
{{{code: lang="c" linenumbers="True"
#include <ESP8266WiFi.h>
#include <time.h>           // to get date and time

// setup network
const char* ssid = "WIFI_NAME";
const char* password = "WIFI_PASSWORD";

// setup timezone
int timezone = 1;           // UTC + 1 = Central European Time
int dst = 0;                // flag for "is day light saving time", note that this seems always to be interpreted as 0
                            // ==> this variable is just a dummy in the function call

void setup() {
  // put setup code here, to run once
  
  Serial.begin(115200);
  Serial.println();
  Serial.print("Wifi connecting to ");
  Serial.println( ssid );

  WiFi.begin(ssid,password);

  Serial.println();
  
  Serial.print("Connecting");

  while( WiFi.status() != WL_CONNECTED ){
      delay(500);
      Serial.print(".");        
  }

  Serial.println();

  Serial.println("Wifi Connected Success!");
  Serial.print("NodeMCU IP Address : ");
  Serial.println(WiFi.localIP() );

  // get initial time via NTP, default update interval 1 hour
  configTime(timezone*3600, dst, "pool.ntp.org","time.nist.gov");
  Serial.println("\nWaiting for Internet time");

  while(!time(nullptr)){
     Serial.print("*");
     delay(1000);
  }
  Serial.println("\nTime response....OK");  
}

void loop() {
  // put your main code here, to run repeatedly:

  int dst_hours;
  
  time_t now = time(nullptr);

  // create a time structure (struct tm) called timeinfo
  // info: http://www.cplusplus.com/reference/ctime/localtime/
  struct tm * timeinfo = localtime(&now);

  // 0 = Sunday
  Serial.print(timeinfo->tm_wday);
  Serial.print(", ");
  Serial.print(timeinfo->tm_mday);
  Serial.print(".");
  Serial.print(timeinfo->tm_mon + 1);
  Serial.print(".");
  Serial.print(timeinfo->tm_year + 1900);
  
  Serial.print(" ");

  // test if Daylight Saving Time is active
  if (summertime_EU( (timeinfo->tm_year + 1900 + 1), timeinfo->tm_mon + 1, timeinfo->tm_mday, timeinfo->tm_hour, timezone)) {
    dst_hours = 1;
  } else {
    dst_hours = 0;
  }
  
  Serial.print(timeinfo->tm_hour + dst_hours);
  Serial.print(":");
  Serial.print(timeinfo->tm_min);
  Serial.print(":");
  Serial.println(timeinfo->tm_sec);

  //Serial.print("DST: ");
  //Serial.println(timeinfo->tm_isdst);
  
  delay(1000);
}


boolean summertime_EU(int year, byte month, byte day, byte hour, byte tzHours)
// European Daylight Savings Time calculation by "jurs" for German Arduino Forum
// https://forum.arduino.cc/index.php?topic=172044.msg1278536#msg1278536
// input parameters: "normal time" for year, month, day, hour and tzHours (0=UTC, 1=MEZ)
// return value: returns true during Daylight Saving Time, false otherwise
{
  if (month<3 || month>10) return false; // keine Sommerzeit in Jan, Feb, Nov, Dez
  if (month>3 && month<10) return true; // Sommerzeit in Apr, Mai, Jun, Jul, Aug, Sep
  if (month==3 && (hour + 24 * day)>=(1 + tzHours + 24*(31 - (5 * year /4 + 4) % 7)) || month==10 && (hour + 24 * day)<(1 + tzHours + 24*(31 - (5 * year /4 + 1) % 7)))
    return true;
  else
    return false;
} 
}}}

2. Upload the code to the ESP8266: 	<''ctrl> + u''
3. Start the Serial Monitor (Tools → Serial Monitor or ''<ctrl> + M'')
4. Set the baud rate to the value set in the code (115200)


===== Program example: controlling an LED via WiFi =====
1. Use the following code
{{{code: lang="c" linenumbers="True"
#include <ESP8266WiFi.h>
 
const char* ssid = "WIFI_NAME";
const char* password = "PASSWORD";
 
#define DIODE_PIN D8

WiFiServer server(80);
 
void setup() {
  Serial.begin(115200);
  delay(10);
 
  pinMode(DIODE_PIN, OUTPUT);
  digitalWrite(DIODE_PIN, LOW);
 
  // Connect to WiFi network
  Serial.print("Connecting to ");
  Serial.println(ssid); 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
 
  // Start the server
  server.begin();
  Serial.println("Server started");
 
  // Print the IP address
  Serial.print("Use this URL to connect: ");
  Serial.print("http://");
  Serial.print(WiFi.localIP());
  Serial.println("/");
 
}
 
void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
 
  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(1);
  }
 
  // Read the first line of the request
  String request = client.readStringUntil('\r');
  Serial.println(request);
  client.flush();
 
  // Match the request
  int value = LOW;
  if (request.indexOf("/LED=ON") != -1)  {
    digitalWrite(DIODE_PIN, HIGH);
    value = HIGH;
  }
  if (request.indexOf("/LED=OFF") != -1)  {
    digitalWrite(DIODE_PIN, LOW);
    value = LOW;
  }
  
  // Return the response
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println(""); //  do not forget this one
  client.println("<!DOCTYPE HTML>");
  client.println("<html>");
 
  client.print("Led is now: ");
 
  if(value == HIGH) {
    client.print("On");
  } else {
    client.print("Off");
  }
  client.println("<br><br>");
  client.println("<a href=\"/LED=ON\"\"><button>On </button></a>");
  client.println("<a href=\"/LED=OFF\"\"><button>Off </button></a><br />");  
  client.println("</html>");
 
  delay(1);
  Serial.println("Client disonnected");
  Serial.println("");
 
} 
}}}


2. Connect LED with long pin to ''D8'' and short pin to ''GND''
3. Upload the code to the ESP8266
4. Start the Serial Monitor (Tools → Serial Monitor or ''<ctrl> + M'')
5. Set the baud rate to the value set in the code (115200)
6. Open the corresponding IP address in your browser and 


===== Program example: NodeMCU with ESP8266 and 0.91'' 128x32 OLED display =====
1. A few starting notes
	* OLED displays don't requires backlight, results in nice contrast in dark background and consumes little energy
	* Using I2C communication, wiring is as follow (left is OLED, right is NodeMCU):
		* Vin		→	3.3V
		* GND	→	GND
		* SCL	→	GPIO 5 (D1)
		* SDA	→	GPIO 4 (D2)
		{{../Arduino__NodeMCU_0.91inOLED.png}}
	* Install ''SSD1306'' library from Adafruit in Arduino IDE
	* Install ''GFX'' library from Adafruit in Arduino IDE
	* The examples are really helpful: File → Examples → Adafruit SSD1306
2. Connect wires as described in 1.
3. Use the following code
{{{code: lang="c" linenumbers="True"
#include <SPI.h>
#include <Wire.h>				// for I2C communication
#include <Adafruit_GFX.h>		// for writing to display
#include <Adafruit_SSD1306.h>	// for writing to display

#define SCREEN_WIDTH 128 		// OLED display width, in pixels
#define SCREEN_HEIGHT 32 		// OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET LED_BUILTIN  // Reset pin
								// 4 is default value (or -1 if sharing Arduino reset pin)
								// using NodeMCU, we have to use LED_BUILTIN
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup() {
  // put your setup code here, to run once
  
  // initialize serial monitor at a baud rate of 115200, mostly used for debugging purposes
  Serial.begin(115200);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 		// Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); 					// Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  
  // Pause for 2 seconds
  delay(2000); 

  // clear the display buffer
  display.clearDisplay();
  
  // default font size and color have to be set
  display.setTextSize(1);
  display.setTextColor(WHITE);

  // print a text line
  display.println("Hello World!");
  display.println("Hello again :)");
  
  // actually display the text or drawings on the OLED
  display.display();  
  delay(1000);

  display.clearDisplay();
}

void loop() {
  // put your setup code here, to run once

  int ii;
  
  // Clear the buffer.
  display.clearDisplay();

  // draw a few pixel
  for ( ii=0 ; ii<=10; ++ii){
    display.drawPixel(0,ii,WHITE);
    display.setCursor(50,5);
    
    display.print("ii = ");
    display.print(ii);
    delay(1000);
    display.display();
  }
  
  // set cursor to (x,y) coordinates and start text there
  display.setTextSize(2);
  display.setCursor(90,5);
  display.print(".");
  display.print("0"); 
  
  display.display();

  // update every 1 sec
  delay(1000); 
}
}}}

4. Upload the code to the ESP8266: <''ctrl> + u''
5. A few more commands:
	a. **scrolling text** (scrolls whatever is currently written on the display) 
		''display.startscrollright(0x00, 0x0F)''			scroll text from left to right 
		''display.startscrollright(0x00, 0x00);''			scroll only first "page" of the display (OLED memory has 8 pages, 1 page corresponding to first 4 rows for 32 pixel heigt OLED)
		''display.startscrollleft(0x00, 0x0F)''			scroll text from right to left
		''display.startscrolldiagright(0x00, 0x07)''		scroll text from left bottom corner to right upper corner
		''display.startscrolldiagleft(0x00, 0x07)''			scroll text from right bottom corner to left upper corner 
		''display.stopscroll()''					stop scrolling
	b. using **other fonts** (note that others fonts are available as 9, 12, 18, 24 point sizes, so font sets size, they also contain 7-bit ascii characters)
		''#include <Fonts/FreeSerifBold12pt7b.h>''			include other fonts at beginning
		''display.setFont(&FreeSerif12pt7b);''			change to specified font
		''display.setFont()''					change back to default font
	c. draw **shapes**
		''display.drawPixel(64, 32, WHITE);''			draw pixel at (x,y,color)
		''display.drawLine(x1, y1, x2, y2, WHITE);''		draw line from (x1,y1) to (x2,y2)
		''display.drawRect(x, y, width, height, color);''		draw a rectangle, top left corner is (x,y)
		''display.fillRect(x, y, width, height, color);''		draw a filled rectangle
		''display.drawRoundRect(10, 10, 30, 50, 2, WHITE);	''draw a rectangle with round corners
		''display.fillRoundRect(10, 10, 30, 50, 2, WHITE);	''draw a filled rectangle with round corners
		''display.drawCircle(x, y, radius, color);''		draw a circle with (x,y) as center
		''display.fillCircle(64, 32, 10, WHITE);	''		draw a filled circle
		''display.drawTriangle(x1, y1, x2, y2, x3, y3, color);''	draw a triangle
		''display.fillTriangle(10, 10, 55, 20, 5, 40, WHITE);''	draw a filled triangle
	d. **invert** colors for shapes or text
		''display.invertDisplay(true);''				from now on, all shapes and text are invert
		''display.invertDisplay(false);	''			set back to normal
		
		alternatively, to invert text, one could also do the following
		''// sets text color to black with a white background''
		''display.setTextColor(BLACK, WHITE);''
		''display.setCursor(5,10);''
		''display.println("Inverted text!");''
	e. display **images** on the OLED (images need to be bitmap monocolor images)
		1. resize photo/image to OLED size and save it as monochrome bitmap
		2. convert image to C array, use for example: https://sourceforge.net/projects/lcd-image-converter/files/ 
			Options → Conversion → Prepare:	    Type: Monochrome, Threshold Dither
											Main Scan Direction: Top to Bottom
											Line scan direction: Forward
			Options → Conversion → Image:	   Split to Rows
											Block size: 8 bit
											Byte order: Little-Endian
			Alternative web-app: http://javl.github.io/image2cpp/
		3. copy array picture.c file into Arduino IDE code
		4. use ''display.drawBitmap(x, y, image array, image width, image height, rotation)'' method
			''static const uint8_t image_data_array[1024] = { 0xff, 0xff, 0xff, 0 ..... }''
			''display.drawBitmap(0, 0, image_data_array, 128, 64, 1);''
	f. write some **special characters** using the Code Page 437 font, see here https://www.ascii-codes.com/
		''display.cp437(true);''					activate the font  ← //might not be necessary//
		''display.write(167);''					write symbol 167 (the ° symbol)
		''display.write(3);''					write symbol 3 (a heart)
6. If you want to use multiple displays, change the address of one of the displays (often, their address can be changed by unsoldering a resistor or setting a jumper otherwise)

