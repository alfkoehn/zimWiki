Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-02-03T06:30:33+01:00

====== netCDF ======
Created Montag 03 Februar 2020

NetCDF: Network Common Data Format


===== Software for looking into netCDF files =====
* ''ncview'' to directly plot data with a GUI also showing all variables in file
	''$ ncview my_nc_file.nc''
* ''ncdump'' to look into file
	''$ ncdump -h my_nc_file.nc		# shows only headers (metadata)''


===== Using netCDF in Python =====

==== Using netCDF4 library ====
{{{code: lang="python3" linenumbers="True"
from netCDF4 import Dataset
import numpy as np

# opening file (creating a file handler)
filename_in = 'my_nc_data.nc'
fh = Dataset(filename_in, mode='r')

# read data from any of the variables in our file
lons = fh.variables['lon'][:]
lats = fh.variables['lat'][:]
tmax = fh.variables['Tmax'][:]
tmax_units = fh.variables['Tmax'].units

# close file
fh.close() 
}}}


==== Using xarray library ====
{{{code: lang="python3" linenumbers="True"
import xarray as xr

# open single file (dataset)
# by convention, datasets are named in upper case
filename_in = 'my_nc_file.cdf'
DS = xr.open_dataset(filename_in)

# open multiple files
filename_in_DIR = 'my_nc_files_*.cdf'
DS = xr.open_mfdataset(filename_in_DIR)

# xarray.DataArray is a labelled multidimensional array for a single variable
# it contains following key properties
data   = DS.values			# np.ndarray holding array's values
dims   = DS.dims			# dimension names for each axis
coords = DS.coords			# dict-like container to label each points (1D arrays for axes) 
attrs  = DS.attr			# arbitrary metadata (attributes) 
}}}
 

==== Code to get dimensions, variables, attribute informations ====
{{{code: lang="python3" linenumbers="True"
"""
original written by Chris Slocum
taken from http://schubert.atmos.colostate.edu/~cslocum/netcdf_example.html
(and slightly modified) 
"""

import numpy as np
from netCDF4 import Dataset

def ncdump(nc_fid, verb=True):
    '''
    ncdump outputs dimensions, variables and their attribute information.
    The information is similar to that of NCAR's ncdump utility.
    ncdump requires a valid instance of Dataset.

    Parameters
    ----------
    nc_fid : netCDF4.Dataset
        A netCDF4 dateset object
    verb : Boolean
        whether or not nc_attrs, nc_dims, and nc_vars are printed

    Returns
    -------
    nc_attrs : list
        A Python list of the NetCDF file global attributes
    nc_dims : list
        A Python list of the NetCDF file dimensions
    nc_vars : list
        A Python list of the NetCDF file variables
    '''
    def print_ncattr(key):
        """
        Prints the NetCDF file attributes for a given key

        Parameters
        ----------
        key : unicode
            a valid netCDF4.Dataset.variables key
        """
        try:
            print "\t\ttype:", repr(nc_fid.variables[key].dtype)
            for ncattr in nc_fid.variables[key].ncattrs():
                print '\t\t%s:' % ncattr,\
                      repr(nc_fid.variables[key].getncattr(ncattr))
        except KeyError:
            print "\t\tWARNING: %s does not contain variable attributes" % key

    # NetCDF global attributes
    nc_attrs = nc_fid.ncattrs()
    if verb:
        print "NetCDF Global Attributes:"
        for nc_attr in nc_attrs:
            print '\t%s:' % nc_attr, repr(nc_fid.getncattr(nc_attr))
    nc_dims = [dim for dim in nc_fid.dimensions]  # list of nc dimensions
    # Dimension shape information.
    if verb:
        print "NetCDF dimension information:"
        for dim in nc_dims:
            print "\tName:", dim 
            print "\t\tsize:", len(nc_fid.dimensions[dim])
            print_ncattr(dim)
    # Variable information.
    nc_vars = [var for var in nc_fid.variables]  # list of nc variables
    if verb:
        print "NetCDF variable information:"
        for var in nc_vars:
            if var not in nc_dims:
                print '\tName:', var
                print "\t\tdimensions:", nc_fid.variables[var].dimensions
                print "\t\tsize:", nc_fid.variables[var].size
                print_ncattr(var)
    return nc_attrs, nc_dims, nc_vars

fname_in = 'my_netcdf_file.nc'
nc_fid = Dataset(fname_in, 'r')
nc_attrs, nc_dims, nc_vars = ncdump(nc_fid)
}}}

