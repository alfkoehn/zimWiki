Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-04-04T11:19:43+02:00

====== Animations ======
Created Samstag 04 April 2020

A simple example to illustrate how it works, source: https://brushingupscience.com/2016/06/21/matplotlib-animations-the-easy-way/
{{{code: lang="python3" linenumbers="True"
# import standard modules
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
plt.style.use('ggplot')

# set-up plotting area
fig, ax = plt.subplots(figsize=(5, 3))
# setting axes-ranges in advance to stop auto rescaling of plot 
ax.set(xlim=(-3, 3), ylim=(-1, 1))

# create some data
x = np.linspace(-3, 3, 91)
t = np.linspace(1, 25, 30)
X2, T2 = np.meshgrid(x, t)
 
sinT2 = np.sin(2*np.pi*T2/T2.max())
F = 0.9*sinT2*np.sinc(X2*(1 + sinT2))

# set-up a line object with desired attributes
# note the [0] at end:
#   necessary b/c plot command returns list of line object
#   here we are only plotting a single line 
line = ax.plot(x, F[0, :], color='black', linewwidth=2)[0]

# function of update the line
def animate(i):
    line.set_ydata(F[i, :])
    
# call FuncAnimation and show plot
anim = FuncAnimation(
    fig, animate, interval=100, frames=len(t)-1)
 
plt.draw()
plt.show()

# optional: export animation
anim.save('filename.mp4')
anim.save('filename.gif', write='imagemagick') 
}}}
 
Another example for a ''pcolor'' plot, using same code structure as previous example:
{{{code: lang="python3" linenumbers="True"
x = np.linspace(-3, 3, 91)
t = np.linspace(0, 25, 30)
y = np.linspace(-3, 3, 91)
X3, Y3, T3 = np.meshgrid(x, y, t)
sinT3 = np.sin(2*np.pi*T3 /
               T3.max(axis=2)[..., np.newaxis])
G = (X3**2 + Y3**2)*sinT3

cax = ax.pcolormesh(x, y, G[:-1, :-1, 0],
                    vmin=-1, vmax=1, cmap='Blues')
fig.colorbar(cax)
 
def animate(i):
     cax.set_array(G[:-1, :-1, i].flatten()) 
}}}

Another example for a ''scatter'' plot:
{{{code: lang="python3" linenumbers="True"
ax.set(xlim=(-3, 3), ylim=(-1, 1))
scat = ax.scatter(x[::3], F[0, ::3])
 
def animate(i):
    y_i = F[i, ::3]
    scat.set_offsets(np.c_[x[::3], y_i]) 
}}}

Another example for a ''quiver'' plot:
{{{code: lang="python3" linenumbers="True"
ax.set(xlim=(-4, 4), ylim=(-4, 4))
 
# Plot every 20th arrow
step = 20
x_q, y_q = x[::step], y[::step]
 
# Create U and V vectors to plot
U = G[::step, ::step, :]
V = np.roll(U, shift=3, axis=2)
 
qax = ax.quiver(x_q, y_q,
                U[..., 0], V[..., 0],
                scale=100)
 
def animate(i):
    qax.set_UVC(U[..., i], V[..., i]) 
}}}

Another example for a ''contour'' plot:
	-> note: contour plots are a bit different, redrawing contour plot for each frame is required
{{{code: lang="python3" linenumbers="True"
# specifying keyword arguments via contour_opts dict
# to avoid specifying it in both contour-calls
contour_opts = {'levels': np.linspace(-9, 9, 10),
                'cmap':'RdBu', 'lw': 2}
cax = ax.contour(x, y, G[..., 0], **contour_opts)
 
def animate(i):
    ax.collections = []
    ax.contour(x, y, G[..., i], **contour_opts) 
}}}

Another example for animated text and labels:
{{{code: lang="python3" linenumbers="True"
ax.set(xlim=(-1, 1), ylim=(-1, 1))
string_to_type = 'abcdefghijklmnopqrstuvwxyz0123'
label = ax.text(0, 0, string_to_type[0],
                ha='center', va='center',
                fontsize=12)
 
def animate(i):
    label.set_text(string_to_type[:i+1])
    ax.set_ylabel('Time (s): ' + str(i/10))
    ax.set_title('Frame ' + str(i)) 
}}}



