Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2019-07-01T12:37:52+02:00

====== Python ======
Created Montag 01 Juli 2019

===== Mayavi =====
Very smooth 3D plotting environment. To use it on a clean python environment, i.e. with nothing installed, do the following
	1. create a new (empty) virtual environment, and activate it
		''$ python 3 -m venv env''
		''$ source env/bin/activate''
	2. update pip first (required for the pyqt5 package, which seem to use some stuff outside of the virtual environment)
		''$ pip install pip --upgrade''
	3. install all required packages
		''$ pip install mayavi''
		''$ pip install configobj''
		''$ pip install pyqt5''
	4. run a simple code snippet to test if it works
{{{code: lang="python3" linenumbers="True"
import matplotlib.pyplot as plt
from mayavi import mlab
import numpy as np

import matplotlib
import mayavi
import sys

# check versions
print( 'matplotlib version: ', matplotlib.__version__ )
print( 'mayavi version    : ', mayavi.__version__ )
print( 'numpy version     : ', np.__version__ )
print( 'python version    : ', sys.version_info )

# create the grid
x       = np.linspace(0,np.pi,100)
y       = np.linspace(0,2*np.pi,200)
z       = np.linspace(0,2*np.pi,400)
X, Y, Z = np.meshgrid(x, y, z)

# create the data to be plotted
dat = np.cos(X) * np.sin(Y) * np.cos(Z)

fig1    = mlab.figure( bgcolor=(1,1,1), 
                       fgcolor=(0,0,0),
                       size=(800,600), 
                       )

# make a 3D contour plot
cont3d  = mlab.contour3d( dat, 
                          transparent=True, opacity=.4,
                          figure=fig1,
                          colormap='bwr'
                        )
#ax1     = mlab.axes( color=(1,1,1), nb_labels=4 )
mlab.outline(cont3d)
#mlab.outline()      # <-- in some situations, the axes might not lie on top of outline
mlab.show()

}}}



===== Python virtual environments =====
The idea is to create an isolated environment for a Python project. This has the advantage that each project has its own dependencies and libraries.

==== Using virtual environments ====
1. If not using Python 3, ''virtualenv'' has to be installed first:

	''$ pip install virtualenv''
	
	 As for Python 3, the ''venv'' module is among the standard libraries already installed.
2. Create a new virtual environment inside the current directory:
'''

# Python 2:
$ virtualenv env

# Python 3
$ python3 -m venv env
'''


3. To use the environment in isolation, it needs to be activated:

'''
$ source env/bin/activate
(env) $
'''


	 Prompt is prefixed with the name of the environment (''env'', in our case). This is the indicator that ''env'' is currently active, which means the python executable will only use this environmentâ€™s packages and settings. To install packages within the active environment, simply do

	''(env) $ pip install numpy''

4. To list all installed packages within the virtual environment, you can //freeze// its state:

	''(env) $ pip freeze > requirements.txt''
	
	 Later, when setting up a new environment which should consist of the same packages, one can do

	''(env) $ pip install -r requirements.txt''

5. Leave (deactivate) the environment:

'''
(env) $ deactivate
'''


==== Managing virtual environments with virtualenvwrapper ====
Virtual environments are good when it comes to managing their own environment. After creating a few of those, it can become cumbersome to keep the overview. The tool ''virtualenvwrapper'' was developed for this problem. It's basically just some wrapper scripts around ''virtualenv''.
A few advantages are:
	* Organizes all virtual environments in one location
	* Provides methods to help create, delete, and copy environments
	* Provides a single command to switch between environments
	* provides tab-completion on environment names

	$ ''pip install virtualenvwrapper						''install virtualenvwrapper
	$ ''export WORKON_HOME=~/Envs''							place all future virtual environments created with virtualenv in ~/Envs
	$ ''source /usr/local/bin/virtualenvwrapper.sh''
	$ ''mkvirtualenv project_folder''						creates the project_folder folder inside [[~/Envs]]
	''$ workon project_folder''				Work on a virtual environment (also deactivate current environment)
	''$ deactivate''					deactivate virtual environment
	''$ rmvirtualenv venv''				delete virtual environment venv


===== Often seen or used header of python files =====
* very first line often contains the **shebang line**, following example (often appearing in python code) ensures that interpreter used is the first one in environment's ''$PATH''
	''#!/usr/bin/env python''
* for proper utf-8 support (to, for example write umlaute), one of the following lines has to be included at the beginning (first emacs-friendly)
	''# -*- coding: utf-8 -*-''
	''# coding=utf-8''
* a docstring should be next, including a description of what the code is doing, if it's long a one-line summary should be used at the beginning, followed by an empty line
* some metadata is often included, although this is a controversial topic (license for example might be better to only put it into a separate file)
	'''
	__author__	= "Peter Mueller"
	__email__	= "peter@mueller.com"
	__copyright__	= "University of Stuttgart"
	__license__	= "MIT"
	__maintainer__	= Peter Mueller"
	'''
* import statements should be organized as follows:
	* built-in modules
	* third-party modules
	* changes to the path and own modules


===== Miniconda as a virtual environment tool =====
Conda is a package management system, miniconda (as a lightweight alternative to Anaconda) is a software package including conda and python. Using conda requires manual installing of each package, whereas Anaconda contains most of the existing popular packages (and is thus somewhat heavy).
**Installing miniconda**
1. Download latest shell script 
	''$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh''
2. Make the script executable
	''$ chmod +x Miniconda3-latest-Linux-x86_64.sh''
3. Run the script
	''$ ./Miniconda3-latest-Linux-x86_64.sh''
4. It is recommended to ask last question with <no>, or to manually delete ''.bashrc'' entry afterwards and replace it with 
{{{code: lang="sh" linenumbers="True"
source ~/miniconda3/etc/profile.d/conda.sh
if [[ -z ${CONDA_PREFIX+x} ]]; then
    export PATH="~/conda/bin:$PATH"
fi
}}}
	
**Activate conda**
1. If done as suggested above, type
	''$ conda activate base''
2. The text ''(base)'' in front of the bash prompt indicates conda is running now
**Managing virtual environments**
1. Create a new virtual environment
	''$ conda create --name ENV_NAME python=PYTHON_VERSION''
	''$ conda create --name py37 python=3.7''
2. Delete a virtual environment
	''$ conda remove --name ENV_NAME --all''
3. List all virtual environments
	''$ conda info -e''
4. Activate a virtual environment
	''$ conda activate ENV_NAME''
5. Deactivate current environment
	''$ conda deactivate''
6. Install python packages
	''$ conda install PACKAGE_NAME''
	look at https://anaconda.org/ for available packages
7. Uninstall python packages
	''$ conda uninstall PACKAGE_NAME''
8. List installed packages in current environment
	''$ conda list''


===== Using pip to install additional libraries/packages =====
Installing pip3 without root privileges:
1. download install script
	''$ wget https://bootstrap.pypa.io/get-pip.py''
2. run the installation script
	''$ python3 get-pip.py --user''
3. pip3 is now installed at ''/home/$USER/.local/bin/''[[,]] check installed version with  ''$HOME/.local/bin/pip3 -V'' 
	or ''PATH=$PATH:$HOME/.local/bin'' and then ''pip3 --version'' 
4. use it as follows
	''$ python3 -m pip install --user --upgrade matplotlib numpy scipy''
 

===== Some scipy stuff =====
* ''scipy.mgrid[1:6:4j]'' makes a list of length 4, with first element 1, last element 6, and stepsize (6-1)/(4-1)
