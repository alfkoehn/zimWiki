Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-29T00:27:44+02:00

====== PGP ======
Created Samstag 29 Juni 2019

===== PGP - Pretty Good Privacy =====
PGP is an encryption tool that was created in the 1990s by Phil Zimmerman. It can be used to **sign**, **encrypt** and **decrypt** files, emails, or even whole disk partitions.

===== Open PGP =====
Open source standard allowing PGP to be used in free software. //Open PGP// often refers to tools that support open-source PGP encryption technology.

===== GPG - GNU Privacy Guard (GnuPG) =====
GPG is an implementation of the Open PGP standard and provides thus an alternative to the official (proprietary) PGP software. 

==== General comments ====
* ''gpg'' is a standalone version, gpg2 is a completely redesigned version
	→ newer version splits into modules
	→ usage of ''gpg2'' seems to be generally recommended
	→ NOTE: gpg 2.1 combines formerly separated public + private keyrings into public keyring
			 i.e. gpg 2.1 stores private key in another file
* export keys to a file (for sharing them)
	''$ gpg -a --export my.email@mail.com > mypubkey.asc''
* publish keys to keyserver (and give others then key ID along with fingerprint)
	''$ gpg --keyserver pool.sks-keyservers.net --send-keys my.email@example.com''
	''$ gpg --keyid-format 0xlong --fingerprint my.email@example.com''
* export private keys (for backup, for example)
	''$ gpg --export-secret-keys my.email@example.com > mysecretkey.asc''
	→ seems to be better with ''--armor'' option 
* print entire public key to terminal (for sharing)
	''$ gpg2 --armor --export my.email@mail.com''
* show path used to store keyring
	''$ gpg --version''
	''$ gpg2 --version''
* list private keys
	''$ gpg2 --list-secret-keys''
* stored in ''~/.gnupg/''
	→ can be copied to new home directory
* create revocation certificate; needed if private key is compromised or lost, then this revocation certificate is published to notify others
	''$ gpg2 --output revoke.asc --gen-revoke mykey''


==== Basic commands ====
	''$ gpg2 --gen-key''				create a key
	''$ gpg2 --export -a "User Name" > private.key	''export public key into file public.key
	''$ gpg2 --export-secret-key -a "User Name" > 	''export private key
		''private.key''
	''$ gpg2 --import publiy-key''			import public key, i.e. add public key from ''public.key'' to your public key ring
	''$ gpg --allow-secret-key-import --import 	''import private key
		''private.key''  					--> NOT RECOMMENDED IN MANPAGE!!!
	''$ gpg2 --import my_private.key''			works instead as well
	''$ gpg2 --delete-key "User Name"''			delete public key from your public key ring
	''$ gpg2 --delete-secret-key "User Name"''		delete a private key
	''$ gpg2 --list-keys''				list keys in your public key ring
	''$ gpg2 --list-secret-keys''			list keys in your secret key ring
	''$ gpg2 --fingerprint > fingerprint''				generate fingerprint (short list of numbers, used via alternative method to verify public key)

==== Some use cases ====
* encrypt some data
	''$ gpg2 -e -u "Sender User Name" -r "Receiver User Name" somefile''
		  ''-u		''specify secret key to be used
		  ''-r		''specify public key of recipient
	( ''$ gpg2 --output doc.gpg --encrypt --recipient hans@email.com )''
* decrypt some data
	''$ gpg2 -d somefile > somefile_decrypted''
		or ''-o somefile_decrypted''
	( ''$ gpg2 --output doc --decrypt doc.gpg )''
* add user ID to existing key
	''$ gpg2 --edit-key <key-id>''
	''gpg> adduid''
	''Real Name: <name>''
	''Email address: <email>''
	''Comment: <comment or Return to none>''
	''Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O''
	''Enter passphrase: <password>''
	''gpg> uid <uid>''
	''gpg> trust''
	''Your decision? 5''
	''Do you really want to set this key to ultimate trust? (y/N) y''
	''gpg> save''
	''$ gpg2 --keyserver pool.sks-keyserver.net --send-keys <key-id>''

* use symmetric cipher to encrypt document
	''$ gpg2 --output doc.gpg --symmetric doc''
	''Enter passphrase:''

* make a digital signature (and compress)
	''$ gpg2 --output doc.sig --sign doc''
		→ to check signature use ''--verify'' option
		→ to verify and extract document use ''--decrypt'' option
			''$ gpg2 --output doc --decrypt doc.sig''
* clearsign document (wrap ASCII signature around document, not modifying otherwise)
	''$ gpg2 --clearsign doc''
* detached signature (i.e. in a separate file)
	''$ gpg2 --output doc.sig --detach-sig doc''
		→ ''--verify'' option to check signature
