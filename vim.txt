Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-24T23:30:20+02:00

====== vim ======
Created Montag 24 Juni 2019

	''u''				undo last change
	''<CTRL>+R			''redo
	''<CTRL>+p			''autocomplete
	''<CTRL>+n			''undo autocomplete
	''%				''automatch, e.g. closing brackets
	''gg				''goto 1st line
	''G				''goto last line
	''za				''fold/unfold code block
	''zM				''fold all
	''zR				''unfold all
	''<ctrl>+x''			decrease number under cursor
	''<ctrl>+a''			increase number under cursor
	''r<char>''				replace character under cursor by ''<char>''
	'':w filename''			save as <filename>
	''gg=G''				auto-indent the whole file


===== Split screens =====
	'':vsplit''				split vim window vertically
	''<ctrl>+w v''			split vim window vertically
	'':split''				split vim window horizontally
	''<ctrl>+w s''			split vim window horizontally
	''<ctrl>+w h''			move to split window left of current split window
	''<ctrl>+w l''			move to split window right of current split window
	''<ctrl>+w j''			move to split window below current split window
	''<ctrl>+w k''			move to split window below current split window
	''<ctrl>+w <''			decrease width of current split window
	''<ctrl>+w >''			increase width of current split window
	''<ctrl>+w -''			decrease height of current split window
	''<ctrl>+w +''			increase height of current split window
	''<ctrl>+w =''			reset current split window's width and height


===== Cursor movement =====
	''h''					move cursor left
	''j''					move cursor down
	''k''					move cursor up
	''l''					move cursor right
	''H''					move to top of screen
	''M''					move to middle of screen
	''L''					move to bottom of screen
	''w''					jump forward to start of a word
	''W''					jump forward to start of a word that can contain punctuations
	''e''					jump forward to end of a word
	''E''					jump forward to end of a word than can contain punctuations
	''b''					jump backwards to start of a word
	''B''					jump backwards to start of a word that can contain punctuations
	''%''					move to matching character (brackets: ''()'', ''{}'', ''[]'')
	''0''					jump to start of line
	''^''					jump to first non-blank character of line
	''$''					jump to end of line
	''g_''					jump to last non-blank character of line
	''gg''					go to first line of document
	''G''					go to last line of document
	''5G''					go to line 5
	''fx''					jump to next occurrence of character x
	''tx''					jump to before next occurrence of character x
	''Fx''					jump to previous occurrence of character x
	''Tx''					jump to after previous occurrence of character x
	'';''					repeat previous f, t, F, T
	'',''					repeat previous f, t, F, T - backwards
	''}''					jump to next paragraph/function/block
	''{''					jump to previous paragraph/function/block
	''zz''					center cursor on screen
	''<ctrl>+e''				move screen down one line (not cursor)
	''<ctrl>+y''				move screen up one line (not cursor)
	''<ctrl>+b''				move back one full screen
	''<ctrl>+f''				move forward one full screen
	''<ctrl>+u''				move back 1/2 screen
	''<ctrl>+d''				move forward 1/2 screen
	

===== Configuration =====
	'':set wrap''				enable line wrapping
	'':set nowrap''				disabale line wrapping


===== Comment and uncomment multiple lines =====
[[http://vimdoc.sourceforge.net/htmldoc/visual.html|Block selection]] is an easy way to realize that:
	1. Put cursor into beginning of line that we want to comment
	2. Put editor into **Visual Block** mode
		''<ctrl>+v''
	3. Go to last line we want to comment (using for example arrow keys or something like ''9j'' to put cursor 9 lines down)
	4. Put editor into **Insert** mode
		''<shift>+i''
	5. Insert comment sign (e.g. ''#'' for python)
		''#''
	6. Press Esc (and wait for a second) to insert the comment character on all selected lines.
		''<esc>''

Uncommenting works in a very similar way:
	1. Put cursor to first comment character
	2. Put editor into **Visual Block** mode
		''<ctrl>+v''
	3. Go to last commentend line
	4. Delete comment character
		''x''


===== vim-plugins via Vundle =====
Source: https://github.com/gmarik/Vundle.vim.git
1. install Vundle
	''$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim''
2. ''~/.vimrc'' 
	''""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
	''" set Vundle environement ''
	''""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
	''set nocompatible            "required (also for other vim stuff)''
	''filetype off                "required''

	''" set runtime path to include Vundle and initialize''
	''set rtp+=~/.vim/bundle/Vundle.vim''

	''call vundle#begin()''

	''" let Vundle manage Vundle (required)''
	''Plugin 'gmarik/Vundle.vim'''

	''" add plugins here (github-name/projectname)''
	''Plugin 'scrooloose/nerdtree'''

	''call vundle#end()''
	''""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
	''filetype plugin indent on   "smartindent for specific languages (like idl)''
3. after restarting vim or source vimrc file in vim ('':source %''), plugins must be installed, do this by typing
   '':BundleInstall''  or '':PluginInstall''
   if "''>''" changed to "''+''" it is installed
   close the buffer with :bdelete

4) some useful commands
   * list all installed plugins
	   :PluginList
   * update plugins
	   :PluginUpdate
   * reinstall plugins
	   :PluginInstall!
   * delete installed plugin
	   :PluginList
	   move cursor to plugin to be deleted
	   <shift>+d
	   remove line from .vimrc 
   * search and install plugin using Vundle
	   :PluginSearch search_expression
	   move cursor to desired plugin
	   i to install plugin
	   copy the line and paste it to .vimrc file
   * install plugins from github 
	   Plugin github_repo_user/github_repo_project_name
	   save file and restart vim (or :source %)
	   :PluginInstall will install the plugin   

5) some useful plugins
   * NERDTree, github: scrooloose/nerdtree
	  :NERDTree      open explorer-like sidebar
	  :Bookmark foo  create a bookmark in that folder
	  B              list bookmarks
	  ?              help (list commands) 
	  q              close NERDTree window


===== Spell check =====
	'':set spell''				enable spell check
	'':set nospell''				disable spell check
	'':set spell spelllang=en_us''		enable spell check using US region English
	
Any misspelled word will be highlighted. The following commands exists (when in command mode)
	'']s''					find next misspelled word after cursor
	''[s''					find next misspelled word before cursor
	''z=''					find suggestions for misspelled word at current cursor position


==== Using your own spell-file ====
Create following directory (if not existing)
	''$ mkdir ~/.vim/spell/''  
Set spell-file for each language in vim
	'':set spellfile=~/.vim/spell/en.utf-8.add''   
Go to the in-correctly highlighted word
	''zg''					add word to spell-file (user dictionary)
	''zug''					undo this (remove word from spell-file)
	
